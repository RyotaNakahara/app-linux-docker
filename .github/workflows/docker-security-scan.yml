name: Docker Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎週月曜日の午前2時（UTC）に実行
    - cron: '0 2 * * 1'

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: laravel-app:${{ github.sha }}
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'laravel-app:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'laravel-app:${{ github.sha }}'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # 脆弱性があっても失敗しない（警告のみ）

  docker-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error  # warningは無視してerrorのみ失敗させる

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          cp .env.example .env || cat > .env << 'EOF'
          APP_NAME=Laravel
          APP_ENV=local
          APP_KEY=
          APP_DEBUG=true
          APP_TIMEZONE=UTC
          APP_URL=http://localhost

          DB_CONNECTION=pgsql
          DB_HOST=postgres
          DB_PORT=5432
          DB_DATABASE=laravel
          DB_USERNAME=laravel
          DB_PASSWORD=secret

          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=

          SESSION_DRIVER=redis
          CACHE_STORE=redis

          MAIL_MAILER=smtp
          MAIL_HOST=mailhog
          MAIL_PORT=1025
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_ENCRYPTION=null
          MAIL_FROM_ADDRESS=hello@example.com
          MAIL_FROM_NAME=Laravel
          EOF

      - name: Build and test
        run: |
          docker compose build
          docker compose up -d

          # 依存コンテナの起動を待つ
          echo "Waiting for dependencies to be ready..."
          sleep 30

          # コンテナの状態を確認
          echo "=== Container Status ==="
          docker compose ps

          # APP_KEYを生成（リトライ機能付き）
          echo "Generating application key..."
          for i in {1..5}; do
            if docker compose exec -T app php artisan key:generate --force 2>/dev/null; then
              echo "✓ APP_KEY generated successfully"
              break
            fi
            echo "⚠ Attempt $i/5 failed, retrying in 5s..."
            sleep 5
          done

          # コンテナを再起動して環境変数を反映
          echo "Restarting containers to apply APP_KEY..."
          docker compose restart app nginx
          sleep 15

          # ヘルスチェックが完了するまで待機
          echo "Waiting for services to be healthy..."
          for i in {1..24}; do
            if docker compose ps | grep -q "(healthy)"; then
              echo "✓ All services are healthy!"
              break
            fi
            echo "Waiting... ($i/24)"
            sleep 5
          done

          # 最終状態を表示
          echo "=== Final Container Status ==="
          docker compose ps
          echo "=== Recent Logs ==="
          docker compose logs --tail=50

      - name: Check app health
        run: |
          # 全サービスがhealthyになるまで追加で待機
          echo "Final health check verification..."
          max_wait=60
          elapsed=0
          while [ $elapsed -lt $max_wait ]; do
            healthy_count=$(docker compose ps --format json | jq -r '.[] | select(.Health == "healthy") | .Name' | wc -l)
            total_count=$(docker compose ps --format json | jq -r '.[].Name' | wc -l)
            
            if [ "$healthy_count" -ge 3 ]; then
              echo "✓ At least 3 services are healthy ($healthy_count/$total_count)"
              break
            fi
            
            echo "Waiting for services to be healthy... ($healthy_count/$total_count healthy, ${elapsed}s elapsed)"
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          # 最終状態を表示
          echo "=== Final Status ==="
          docker compose ps
          
          # Nginxのヘルスチェックエンドポイントを確認（リトライ付き）
          echo "Testing /health endpoint..."
          for i in {1..5}; do
            if curl -f -s http://localhost/health; then
              echo "✓ Health endpoint OK"
              break
            fi
            echo "⚠ Attempt $i/5 failed, retrying..."
            sleep 3
          done
          
          # アプリケーションのルートを確認（リトライ付き）
          echo "Testing / endpoint..."
          for i in {1..5}; do
            if curl -f -s http://localhost/ > /dev/null; then
              echo "✓ Root endpoint OK"
              exit 0
            fi
            echo "⚠ Attempt $i/5 failed, retrying..."
            sleep 3
          done
          
          # すべて失敗した場合、詳細なログを表示
          echo "✗ Health check failed, showing logs..."
          docker compose logs --tail=100
          exit 1

      - name: Cleanup
        if: always()
        run: docker compose down -v

